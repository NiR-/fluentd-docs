# Buffer Plugin Overview

NOTE: This page is simply copied from LINK(v0.12):[v0.12 documents](/articles/buffer-plugin-overview), and will be updated later.

Fluentd has 7 types of plugins: [Input](input-plugin-overview), [Parser](parser-plugin-overview), [Filter](filter-plugin-overview), [Output](output-plugin-overview), [Formatter](formatter-plugin-overview), [Storage](storage-plugin-overview) and [Buffer](buffer-plugin-overview). This article gives an overview of Buffer Plugin.

## Buffer Plugin Overview

Buffer plugins are used by output plugins in buffered mode, typically by `file`, `forward`, etc. Users can choose the buffer plugin that best suits their performance and reliability needs.

## Buffer Structure

The buffer plugins have 2 internal structures: stage and queue. Buffer plugins append events to the chunks in stage ("staged" chunks), and put chunks, which are full or expired, into queue ("queued" chunks). Queued chunks will be flushed by output plugins next to next (in FIFO way: first-in, first-out).

![Fluentd v0.14 Plugin API Overview](/images/fluentd-v0.14-plugin-api-overview.png)

    :::text
                                   stage
                                   +---------+
                                   |         |
    write events to staged chunks --> chunk  |
                                   |         |
                           events --> chunk  |
                                   |         |
                           events --> chunk  |
                                   |         |
                           events --> chunk  |
                                   |         |
                                   +---------+

All chunks on stage are writable, and events will be appended into these chunks. Once chunk size reaches the limit of bytesize or records, or it exceeds time limit, that chunk will be removed from stage and pushed into queue.

    :::text
                  queue
                 +---------+
                 |         |
    push chunk  --> chunk  |
     from stage  |         |
                 |  chunk  |
                 |         |
                 |  chunk  |
                 |         |
                 |  chunk --> write out the chunk
                 |         |    queued at first
                 +---------+

Buffer plugins control size limits of each chunks, and size limits of whole buffer plugin. Output plugin referres these limits, and controls flushing and retrying.

## Configuration Parameters

All output plugins support the following buffer parameters:

    :::text
    <match pattern>
      <buffer>
        @type memory
        chunk_limit_size 256m
        total_limit_size 4G
        queue_limit_length 100
        chunk_limit_records 10000
        chunk_full_threshold 0.9
        compress gzip
      </buffer>
    </match>

`@type` specifies the buffer plugin to use. The `memory` Buffer plugin is used by default. You can also specify `file` as the buffer type alongside the `path` parameter as follows:

    :::text
    <match pattern>
      <buffer>
        @type file
        path /var/fluentd/buffer/ #make sure fluentd has write access to the directory!
        ...
      </buffer>
    </match>

### buffer_queue_full_action

Control the buffer behaviour when the queue becomes full. The default mode is `exception`. It raises `BufferQueueLimitError` exception to input plugin. How handle `BufferQueueLimitError` depends on input plugins, e.g. tail input stops reading new lines, forward input returns an error to forward output. This action fits for streaming manner.

Another mode is `block`. It stops input plugin thread until buffer full is resolved. This action is good for batch-like use-case.

We don't recommend to use `block` action to avoid `BufferQueueLimitError`. Please consider improving destination setting to resolve `BufferQueueLimitError` or use `@ERROR` label for routing overflowed events to another backup destination(or `secondary`). If you hit `BufferQueueLimitError` frequently, it means your destination capacity is insufficient for your traffic.

## List of Buffer Plugins

* [buf_memory](buf_memory)
* [buf_file](buf_file)
